// ----------------------------------------------------------------------------
// File: OSClasses.h
// Desc: General OS class wrappers
// Auth: Michael Petrou
// (C) Copyright:   2004
// ----------------------------------------------------------------------------
#ifndef OS_CLASSES_H
#define OS_CLASSES_H


// ----------------------------------------------------------------------------
// Standard includes
// ----------------------------------------------------------------------------
#include "Kernel/Types.h"


// ----------------------------------------------------------------------------
// Name: OS (namespace)
// Desc: Scopes the OS classes
// ----------------------------------------------------------------------------
namespace OS
{
  // ------------------------------------------------------------------------
  // Typedefs for the thread function and thread return type
  // ------------------------------------------------------------------------
  typedef unsigned long ThreadReturnType;
  typedef ThreadReturnType (*ThreadFunc)(void *);

  // -------------------------------------------------------------------------
  // Name: Thread (class)
  // Desc: Manages a thread
  // -------------------------------------------------------------------------
  class Thread
  {
  public:
    // --------------------------------------------------------------------
    // Constructor and destructor
    // --------------------------------------------------------------------
    Thread(OS::ThreadFunc func, void *parg);
    ~Thread();

    // --------------------------------------------------------------------
    // Join the thread
    // --------------------------------------------------------------------
    ThreadReturnType Join();

  private:
    // --------------------------------------------------------------------
    // Hide the copy constructor
    // --------------------------------------------------------------------
    Thread (const Thread &rhs) {}

    // --------------------------------------------------------------------
    // The thread
    // --------------------------------------------------------------------
    HANDLE m_threadhandle;
  }; // class Thread


  // -------------------------------------------------------------------------
  // Name: Event  (class)
  // Desc: Manages an event
  // -------------------------------------------------------------------------
  class Event
  {
  public:
    // --------------------------------------------------------------------
    // Constructor and destructor
    // --------------------------------------------------------------------
    Event();
    ~Event();

    // --------------------------------------------------------------------
    // Set and wait for the event
    // --------------------------------------------------------------------
    void Set();
    void Wait();

  private:
    // --------------------------------------------------------------------
    // Hide the copy constructor
    // --------------------------------------------------------------------
    Event (const Event &rhs) {}

    // --------------------------------------------------------------------
    // The event
    // --------------------------------------------------------------------
    HANDLE m_event;
  }; // class Event


  // ------------------------------------------------------------------------
  // Name: Mutex  (class)
  // Desc: Manages a mutex
  // ------------------------------------------------------------------------
  class Mutex
  {
  public:
    // --------------------------------------------------------------------
    // Constructor and destructor
    // --------------------------------------------------------------------
    Mutex();
    virtual ~Mutex();

    // --------------------------------------------------------------------
    // Acquire and release the mutex
    // --------------------------------------------------------------------
    void Acquire();
    void Release();

  private:
    // --------------------------------------------------------------------
    // Hide the copy constructor
    // --------------------------------------------------------------------
    Mutex (const Mutex &rhs) {}

    // --------------------------------------------------------------------
    // The mutex
    // --------------------------------------------------------------------
    HANDLE m_mutex;

  }; // class Mutex


  // ------------------------------------------------------------------------
  // Name: MutexLock (class)
  // Desc: Locks the mutex in the constructor, and releases it in the 
  //       destructor.  Useful for ensuring a mutex is released when the 
  //       MutexLock goes out of scope
  // ------------------------------------------------------------------------
  class MutexLock
  {
  public:
    // --------------------------------------------------------------------
    // Constructor and destructor
    // --------------------------------------------------------------------
    MutexLock (Mutex &m) : m_mutex(m) {m.Acquire();}
    virtual ~MutexLock() {m_mutex.Release();}

  private:
    // --------------------------------------------------------------------
    // The OS Mutex
    // --------------------------------------------------------------------
    Mutex &m_mutex;

  }; // MutexLock


}; // namespace OS


#endif // OS_CLASSES_H

// -- EOF


